import os
import requests
import streamlit as st
from logger import logger  

st.set_page_config(page_title="ChatBot Lu·∫≠t Vi·ªát Nam", layout="wide")
st.title("üìò ChatBot Lu·∫≠t Vi·ªát Nam")

logger.info("Giao di·ªán ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c kh·ªüi ch·∫°y")

with st.sidebar:
    st.header("‚öôÔ∏è C·∫•u h√¨nh t√¨m ki·∫øm")
    mode = st.radio("Ph∆∞∆°ng ph√°p t√¨m ki·∫øm", ["hybrid", "vector", "keyword"])
    top_k = st.slider("S·ªë k·∫øt qu·∫£ (top_k)", 1, 10, 5)
    alpha = st.slider("ƒê·ªô c√¢n b·∫±ng (alpha)", 0.0, 1.0, 0.6) if mode == "hybrid" else None

    st.markdown("---")
    st.header("üì§ T·∫£i t√†i li·ªáu lu·∫≠t")
    uploaded_file = st.file_uploader("Ch·ªçn file DOCX", type=["docx"])

    if uploaded_file:
        logger.info("Ng∆∞·ªùi d√πng ƒë√£ ch·ªçn file: {}", uploaded_file.name)

        if st.button("üöÄ Upload v√† x·ª≠ l√Ω"):
            with st.spinner("ƒêang t·∫£i v√† x·ª≠ l√Ω t√†i li·ªáu..."):
                try:
                    files = {
                        "file": (
                            uploaded_file.name,
                            uploaded_file.getvalue(),
                            "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        )
                    }
                    response = requests.post("http://app:8000/upload", files=files)
                    res = response.json()

                    if response.status_code == 200:
                        st.success(f"T·∫£i l√™n th√†nh c√¥ng: {res['filename']}")
                        st.info(f"ƒê√£ t·∫°o doc_id: {res['doc_id']} v·ªõi {res['total_chunks']} ƒëo·∫°n.")
                        logger.info("Upload th√†nh c√¥ng: {} | doc_id={} | chunks={}", res['filename'], res['doc_id'], res['total_chunks'])
                    else:
                        st.error(f"L·ªói t·ª´ server: {res.get('detail', 'Kh√¥ng r√µ nguy√™n nh√¢n.')}")
                        logger.warning("L·ªói khi upload file: {}", res.get("detail", "Kh√¥ng r√µ nguy√™n nh√¢n."))
                except Exception as e:
                    st.error(f"L·ªói khi g·ª≠i file: {e}")
                    logger.exception("Exception khi g·ª≠i file upload: {}", e)

if "messages" not in st.session_state:
    st.session_state.messages = []

for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

query = st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")

if query:
    logger.info("Ng∆∞·ªùi d√πng h·ªèi: {}", query)
    st.session_state.messages.append({"role": "user", "content": query})
    with st.chat_message("user"):
        st.markdown(query)

    with st.spinner("üîç ƒêang ph·∫£n h·ªìi..."):
        try:
            params = {"query": query, "mode": mode, "top_k": top_k}
            if alpha is not None:
                params["alpha"] = alpha

            logger.debug("G·ª≠i y√™u c·∫ßu ƒë·∫øn API: {}", params)
            response = requests.get("http://app:8000/chat", params=params)
            data = response.json()
            answer = data.get("answer", "Kh√¥ng c√≥ ph·∫£n h·ªìi.")
            logger.debug("Nh·∫≠n ph·∫£n h·ªìi: {}", answer[:100] + "...")
        except Exception as e:
            answer = f"L·ªói khi g·ªçi API: {e}"
            logger.exception("L·ªói khi g·ªçi API: {}", e)

    st.session_state.messages.append({"role": "assistant", "content": answer})
    with st.chat_message("assistant"):
        st.markdown(answer)
